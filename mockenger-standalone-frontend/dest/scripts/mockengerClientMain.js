"use strict";angular.module("mockengerClientMainApp",["mockengerClientComponents","ngCookies","ngMessages","ngResource","ngAnimate","ngRoute","ngSanitize","ngTouch","ngToast","ui.bootstrap","angular-confirm"]).config(["$locationProvider","$routeProvider","$httpProvider","ngToastProvider","SECURITY",function(e,t,r,n,o){t.when("/index",{templateUrl:"/modules/main/views/indexView.html",controller:"IndexPageController"}).when("/project/:projectId",{templateUrl:"/modules/main/views/projectView.html",controller:"ProjectPageController",resolve:{currentProject:["$route","projectListService",function(e,t){var r=e.current.params.projectId;return t.projectId=r,t.ajax.get({projectId:r})}]}}).when("/admin",{templateUrl:"/modules/main/views/adminView.html",controller:"AdminPageController"}).otherwise({redirectTo:"/index"}),o&&(t.when("/login",{template:" ",controller:"LoginPageController"}).when("/logout",{template:" ",controller:"LogoutController"}).otherwise({redirectTo:"/login"}),r.interceptors.push("httpProviderInterceptor")),n.configure({animation:"fade",horizontalPosition:"center",dismissButton:!0,timeout:4e3})}]).run(["$confirmModalDefaults",function(e){e.templateUrl="/modules/main/views/confirm.html"}]),angular.module("mockengerClientMainApp").controller("IndexPageController",["$rootScope","$scope","$filter","$confirm","projectListService","valuesetService",function(e,t,r,n,o,a){var u=$("#projectModal");t.projectListService=o,t.projectsList={},t.availableProjectTypes={},t.$watch("currentProject.code",function(e){null!=e&&(t.currentProject.code=r("uppercase")(e))}),t.getProjectTypes=function(){a.projectTypes.get(function(e,r){t.availableProjectTypes=e},function(e){t.showRedMessage(e)})},t.getProjects=function(){o.ajax.query(function(e,t){o.setData(e)},function(e){t.showRedMessage(e)})},t.createProject=function(){t.alerts=[],t.currentProject={},t.projectForm.$setPristine(),u.modal({})},t.editProject=function(e){t.alerts=[],t.currentProject={},angular.copy(e,t.currentProject),u.modal({})},t.deleteProject=function(e){n({text:"Do you really want to delete project '"+e.name+"' with all its groups and mocks?"}).then(function(){o.ajax.delete({projectId:e.id},function(r,n){t.getProjects(),t.showGreenMessage("Project <b>"+e.name+"</b> deleted")},function(e){t.showRedMessage(e)})})},t.saveProject=function(e){null!=e.id?o.ajax.update({projectId:e.id},e,function(r,n){u.modal("hide"),t.getProjects(),t.showGreenMessage("Project <b>"+e.name+"</b> successfully updated")},function(e){t.showRedMessage(e)}):o.ajax.save(e,function(){u.modal("hide"),t.getProjects(),t.showGreenMessage("Project <b>"+e.name+"</b> has been created")},function(e){t.showRedMessage(e)})},o.ajax.query(function(e){o.setData(e),t.getProjectTypes()},function(e){t.showRedMessage(e)})}]),angular.module("mockengerClientMainApp").controller("ProjectPageController",["$scope","currentProject","projectListService","groupListService","requestListService","valuesetService",function(e,t,r,n,o,a){e.currentProject=t,e.groupListService=n,e.requestListService=o,e.requestMethods=[],e.transformerTypes=[],e.headerList=[],n.setCurrent(null),n.setData(null),t.$promise.then(function(o){r.setCurrent(o),e.getRequestMethods(o.id),e.getTransformerTypes(),e.getHeaders(),n.ajax.query({projectId:t.id},function(e,t){n.setData(e)},function(t){e.showRedMessage(t)})},function(t){e.showRedMessage(t)}),e.getRequestMethods=function(t){a.requestMethods.get({projectId:t},function(t,r){e.requestMethods=t},function(t){e.showRedMessage(t)})},e.getTransformerTypes=function(){a.transformerTypes.get(function(t,r){e.transformerTypes=t},function(t){e.showRedMessage(t)})},e.getHeaders=function(){a.headers.get(function(t,r){e.headerList=t},function(t){e.showRedMessage(t)})}}]),angular.module("mockengerClientMainApp").controller("GroupListController",["$scope","$confirm","projectListService","groupService","groupListService","requestListService","API_BASE_PATH",function(e,t,r,n,o,a,u){a.setCurrent(null),a.setData(null),e.isActive=function(e){return e===o.getCurrent()},e.loadGroupRequests=function(t){a.setCurrent(null),o.setCurrent(t),o.setUrlForNewRequests(u+"/"+r.getCurrent().type+"/"+t.id+"/");var n={projectId:r.getCurrent().id,groupId:o.getCurrent().id};a.ajax.query(n,function(e,t){a.setData(e)},function(t){e.showRedMessage(t)})},e.createGroup=function(){n.openGroupModal(r.getCurrent(),null)},e.editGroup=function(e,t){n.openGroupModal(r.getCurrent(),e)},e.deleteGroup=function(u,s){t({text:"Do you really want to delete group '"+s.name+"' with all its mocks?"}).then(function(){null!=o.getData()&&null!=o.getData()[u]&&n.ajax.delete({projectId:r.getCurrent(),groupId:s.id},function(t,r){s==o.getCurrent()&&(o.setCurrent(null),a.setData(null),a.setCurrent(null)),o.removeFromGroupList(u),e.showGreenMessage("Group <b>"+s.name+"</b> deleted"),confirmService.hideDialog()},function(t){e.showRedMessage(t),confirmService.hideDialog()})})}}]),angular.module("mockengerClientMainApp").controller("RequestListController",["$scope","$filter","$confirm","projectListService","groupListService","requestService","requestListService","REQUESTS_PER_PAGE",function(e,t,r,n,o,a,u,s){e.filteredData={},u.setLimit(s),e.createRequest=function(){u.setCurrent({id:null,groupId:o.getCurrent().id,name:null,method:"POST",path:{transformers:null,value:null},headers:{transformers:null,values:[]},parameters:{transformers:null,values:[]},body:{transformers:null,value:null},mockResponse:null})},e.deleteRequest=function(t){r({text:"Do you really want to delete this request?"}).then(function(){var r=u.getRequestIndex(t.id);if(r<0)e.showRedMessage({data:{errors:new Array("Delete process aborted. Cannot find request in the list")}});else{var s={projectId:n.getCurrent().id,groupId:o.getCurrent().id,requestId:t.id};a.ajax.delete(s,function(n,o){e.showGreenMessage("Mock-request <b>"+t.name+"</b> deleted"),u.removeFromRequestList(r),u.getCurrentPage()+1>e.pageCount()&&e.prevPage()},function(t){e.showRedMessage(t)})}})},e.$watchGroup([u.getListOrder,u.getSearchQuery],function(){u.setCurrentPage(0)}),e.selectRequest=function(r,n){u.filteredDataCurrentIndex=e.getOffset()+r,u.setFilteredData(u.getData()),void 0!=u.filters.search.query&&""!=u.filters.search.query&&u.setFilteredData(t("filter")(u.getFilteredData(),u.filters.search.query)),u.setFilteredData(t("orderBy")(u.getFilteredData(),u.filters.order)),u.setCurrent(n)},e.range=function(){for(var t=[],r=0,n=e.pageCount();r<n;r++)t.push(r);return t},e.prevPage=function(){u.getCurrentPage()>0&&u.setCurrentPage(u.getCurrentPage()-1)},e.nextPage=function(){u.getCurrentPage()<e.pageCount()-1&&u.setCurrentPage(u.getCurrentPage()+1)},e.isActive=function(e){return u.getCurrentPage()==e},e.isPrevPageDisabled=function(){return 0===u.getCurrentPage()},e.isNextPageDisabled=function(){return u.getCurrentPage()===e.pageCount()-1},e.getOffset=function(){return u.getCurrentPage()*u.getLimit()},e.pageCount=function(){if(null!=u.getData()){var e=t("filter")(u.getData(),u.getSearchQuery());return Math.ceil(e.length/u.getLimit())}return 0}}]),angular.module("mockengerClientMainApp").controller("RequestController",["$scope","$confirm","projectListService","groupListService","requestService","requestListService",function(e,t,r,n,o,a){var u="REGEXP",s="KEY_VALUE",c="XPATH";e.bodyTransformerTypes=new Array(u,c);var i=function(e){e.push({key:"",value:""})},l=function(e,t){e.push({type:t,pattern:null,replacement:null})},d=function(e){return"POST"===e||"PUT"===e||"PATCH"===e};e.selectMethod=function(e){a.getCurrent().method=e},e.selectTransformerType=function(e,t){t.type=e},e.addParameter=function(){null==a.getCurrent().parameters.values&&(a.getCurrent().parameters.values=[]),i(a.getCurrent().parameters.values)},e.deleteParameter=function(e){t({text:"Do you really want to delete this parameter?"}).then(function(){var t=a.getCurrent().parameters.values;null!=t&&null!=t[e]&&t.splice(e,1)})},e.addRequestHeader=function(){null==a.getCurrent().headers.values&&(a.getCurrent().headers.values=[]),i(a.getCurrent().headers.values)},e.addResponseHeader=function(){null==a.getCurrent().mockResponse?a.getCurrent().mockResponse={headers:[],httpStatus:null,body:null}:null==a.getCurrent().mockResponse.headers&&(a.getCurrent().mockResponse.headers=[]),i(a.getCurrent().mockResponse.headers)},e.deleteHeader=function(e,r){t({text:"Do you really want to delete this header?"}).then(function(){null!=r&&null!=r[e]&&r.splice(e,1)})},e.addPathTransformer=function(){null==a.getCurrent().path.transformers&&(a.getCurrent().path.transformers=[]),l(a.getCurrent().path.transformers,u)},e.addParamTransformer=function(){null==a.getCurrent().parameters.transformers&&(a.getCurrent().parameters.transformers=[]),l(a.getCurrent().parameters.transformers,s)},e.addHeaderTransformer=function(){null==a.getCurrent().headers.transformers&&(a.getCurrent().headers.transformers=[]),l(a.getCurrent().headers.transformers,s)},e.addRequestBodyTransformer=function(){null==a.getCurrent().body.transformers&&(a.getCurrent().body.transformers=[]),l(a.getCurrent().body.transformers,u)},e.deleteTransformer=function(e,r){t({text:"Do you really want to delete this transformer?"}).then(function(){null!=r&&null!=r[e]&&r.splice(e,1)})};var g=function(t){return!!t||(e.showRedMessage({data:{errors:new Array("Field <b>Name</b> is required")}}),!1)},p=function(t){return!(!t||!t.httpStatus)||(e.showRedMessage({data:{errors:new Array("Field <b>HTTP status code</b> is required")}}),!1)},f=function(t){return!!t||(e.showRedMessage({data:{errors:new Array("<b>Method</b> may not be null or empty")}}),!1)};e.saveRequest=function(t){if(g(t.name)&&p(t.mockResponse)&&f(t.method)){d(t.method)||(t.body=null);var u={projectId:r.getCurrent().id,groupId:n.getCurrent().id};null!=t.id?(u.requestId=t.id,o.ajax.update(u,t,function(){e.showGreenMessage("Mock-request <b>"+t.name+"</b> successfully updated")},function(t){e.showRedMessage(t)})):o.ajax.save(u,t,function(t){a.getData().push(t),a.setFilteredData(t),a.setCurrent(t),e.showGreenMessage("Mock-request <b>"+t.name+"</b> has been created")},function(t){e.showRedMessage(t)})}},e.isPrevRequestDisabled=function(){return null==a.getCurrent().id||a.filteredDataCurrentIndex<=0},e.isNextRequestDisabled=function(){return null==a.getCurrent().id||a.filteredDataCurrentIndex>=a.getFilteredData().length-1},e.nextRequest=function(){a.filteredDataCurrentIndex++,a.setCurrent(a.getFilteredData()[a.filteredDataCurrentIndex])},e.prevRequest=function(){a.filteredDataCurrentIndex--,a.setCurrent(a.getFilteredData()[a.filteredDataCurrentIndex])},e.isRequestTabDisabled=function(){return null==a.getCurrent().method||!d(a.getCurrent().method)}}]),angular.module("mockengerClientMainApp").controller("GroupController",["$scope","projectListService","groupService","groupListService","API_BASE_PATH",function(e,t,r,n,o){var a=$("#groupModal");e.groupToSave={},e.urlToSendRequests=null,e.$on("openGroupModal",function(r,n){null==n.id?(e.urlToSendRequests=null,e.groupToSave=n):(e.urlToSendRequests=o+"/"+t.getCurrent().type+"/"+n.id+"/",e.groupToSave={},angular.copy(n,e.groupToSave)),e.groupForm.$setPristine(),a.modal({})}),e.saveGroup=function(t){null!=t.id?r.ajax.update({groupId:t.id},t,function(r,o){a.modal("hide");for(var u=0,s=n.getData().length;u<s;u++)if(n.getData()[u].id==r.id){n.getData()[u]=r;break}e.showGreenMessage("Group <b>"+t.name+"</b> successfully updated")},function(t){e.showRedMessage(t)}):r.ajax.save(t,function(r){a.modal("hide"),n.addGroupToList(r),e.showGreenMessage("Group <b>"+t.name+"</b> has been created")},function(t){e.showRedMessage(t)})}}]),angular.module("mockengerClientMainApp").controller("LoginController",["$http","$cookies","$scope","$location","apiEndpointsService","tokenService",function(e,t,r,n,o,a){r.username="",r.password="",r.doSignIn=function(){a.getAccessToken(r.username,r.password,function(a,u,s,c){t.put("accessToken",a.access_token),t.put("refreshToken",a.refresh_token),e.get(o.getUserData()).success(function(e){t.put("user",angular.toJson(e)),n.path("/index")}).error(function(e,t,n,o){r.showRedMessage({data:e})})},function(e,t,n,o){r.showRedMessage({data:e})})}}]),angular.module("mockengerClientMainApp").controller("LogoutController",["$scope","$http","$cookies","$location","apiEndpointsService",function(e,t,r,n,o){t.post(o.getOAuth2LogoutUrl()+"?token="+r.get("accessToken"),null).success(function(){r.remove("accessToken"),r.remove("refreshToken"),r.remove("user"),n.path("/login")}).error(function(t,r,n,o){e.showRedMessage({data:t})})}]),angular.module("mockengerClientMainApp").controller("LoginPageController",["$scope","$cookies","$location","loginService",function(e,t,r,n){null!=t.get("accessToken")&&null!=t.get("refreshToken")&&t.get("user")?r.path("/index"):n.showSignInForm(e)}]),angular.module("mockengerClientMainApp").controller("AdminPageController",["$scope","accountService","accountListService","valuesetService","API_BASE_PATH",function(e,t,r,n,o){e.roles={},e.createAccount=function(){t.openAccountModal(null)},e.editAccount=function(e){t.openAccountModal(e)},e.getRoles=function(){n.roles.get(function(t,r){e.roles=t},function(t){e.showRedMessage(t)})},e.getRoles()}]),angular.module("mockengerClientMainApp").controller("AccountController",["$scope","accountService","accountListService",function(e,t,r){var n=$("#accountModal");e.currentAccount={},e.repassword="",e.$on("openAccountModal",function(t,r){angular.copy(r,e.currentAccount),e.accountForm.$setPristine(),n.modal({})}),e.saveAccount=function(t){t.password=t.password||"",repassword.value=repassword.value||"",t.password!==repassword.value?e.accountForm.repassword.$invalid=!0:(e.accountForm.repassword.$invalid=!1,null!=t.id?e.updateAccountRequest(t,{accountId:t.id},"Account <b>"+t.username+"</b> successfully updated"):e.saveAccountRequest(t,"Account <b>"+t.username+"</b> has been created"))},e.updateAccountRequest=function(r,o,a){t.ajax.update(o,r,function(){n.modal("hide"),e.showGreenMessage(a),e.getAccountList()},function(t){e.showRedMessage(t)})},e.saveAccountRequest=function(r,o){t.ajax.save(r,function(){n.modal("hide"),e.showGreenMessage(o),e.getAccountList()},function(t){e.showRedMessage(t)})},e.getAccountList=function(){r.ajax.query(function(e){r.setData(e)},function(t){e.showRedMessage(t)})}}]),angular.module("mockengerClientMainApp").controller("AccountListController",["$scope","$confirm","accountListService",function(e,t,r){e.accountListService=r,e.updateAccountList=function(){r.ajax.query(function(e){r.setData(e)},function(t){e.showRedMessage(t)})},e.deleteAccount=function(n){t({text:"Do you really want to delete account '"+n.username+"'?"}).then(function(){r.ajax.delete({accountId:n.id},function(t,r){e.updateAccountList(),e.showGreenMessage("Account <b>"+n.username+"</b> has been deleted")},function(t){e.showRedMessage(t)})})},e.updateAccountList()}]),angular.module("mockengerClientMainApp").controller("EventListController",["$scope","$confirm","eventListService",function(e,t,r){e.eventEntityType="ACCOUNT",e.eventListService=r,e.updateEventList=function(t,n,o){r.events.get({types:t,page:n,sort:o},function(e){r.setCurrentPage(n),r.setData(e)},function(t){e.showRedMessage(t)})},e.pageCount=function(){return null!=r.getData()?r.getData().totalPages:0},e.range=function(){for(var t=[],r=0,n=e.pageCount();r<n;r++)t.push(r);return t},e.isActive=function(e){return r.getCurrentPage()==e},e.isPrevPageDisabled=function(){return 0===r.getCurrentPage()},e.isNextPageDisabled=function(){return r.getCurrentPage()===e.pageCount()-1},e.prevPage=function(){r.getCurrentPage()>0&&(r.setCurrentPage(r.getCurrentPage()-1),e.updateEventList(e.eventEntityType,r.getCurrentPage()))},e.nextPage=function(){r.getCurrentPage()<e.pageCount()-1&&(r.setCurrentPage(r.getCurrentPage()+1),e.updateEventList(e.eventEntityType,r.getCurrentPage()))},e.updateEventList(e.eventEntityType,0)}]),angular.module("mockengerClientMainApp").factory("valuesetService",["$resource","apiEndpointsService",function(e,t){var r={get:{method:"GET",isArray:!0}},n={projectTypes:e(t.getValuesetRestUrl.projectTypes(),{},r),requestMethods:e(t.getValuesetRestUrl.requestMethods(),{projectId:"@projectId"},r),transformerTypes:e(t.getValuesetRestUrl.transformerTypes(),{},r),headers:e(t.getValuesetRestUrl.headers(),{},r),roles:e(t.getValuesetRestUrl.roles(),{},r)};return n}]),angular.module("mockengerClientMainApp").factory("projectListService",["$resource","apiEndpointsService",function(e,t){var r={data:null,current:null,getData:function(){return r.data},setData:function(e){r.data=e},getCurrent:function(){return r.current},setCurrent:function(e){r.current=e},ajax:e(t.getProjectRestUrl(),{projectId:"@projectId"},{update:{method:"PUT"}})};return r}]),angular.module("mockengerClientMainApp").factory("groupService",["$rootScope","$resource","apiEndpointsService",function(e,t,r){var n={ajax:t(r.getGroupRestUrl(),{groupId:"@groupId",projectId:"@projectId"},{update:{method:"PUT"}}),openGroupModal:function(t,r){null==r&&(r={groupId:null,projectId:t.id,name:null,recording:!0,forwarding:!1,recordTo:null}),e.$broadcast("openGroupModal",r)}};return n}]),angular.module("mockengerClientMainApp").factory("groupListService",["$resource","apiEndpointsService",function(e,t){var r={data:null,current:null,urlForNewRequests:null,getData:function(){return r.data},setData:function(e){r.data=e},getCurrent:function(){return r.current},setCurrent:function(e){r.current=e},ajax:e(t.getGroupRestUrl(),{groupId:"@groupId"},{}),addGroupToList:function(e){null==r.data&&(r.data=[]),r.data.push(e)},removeFromGroupList:function(e){r.data.splice(e,1)},setUrlForNewRequests:function(e){r.urlForNewRequests=e},getUrlForNewRequests:function(){return r.urlForNewRequests}};return r}]),angular.module("mockengerClientMainApp").factory("requestService",["$resource","apiEndpointsService",function(e,t){var r={ajax:e(t.getRequestRestUrl(),{requestId:"@requestId",groupId:"@groupId",projectId:"@projectId"},{update:{method:"PUT"}})};return r}]),angular.module("mockengerClientMainApp").factory("requestListService",["$resource","apiEndpointsService",function(e,t){var r={data:null,filteredData:null,filteredDataCurrentIndex:0,current:null,defaultOrderField:"creationDate",filters:{order:this.defaultOrderField,search:{query:void 0},paging:{limit:10,current:0}},getListOrder:function(){return r.filters.order},setListOrder:function(e){r.filters.order=e},getSearchQuery:function(){return r.filters.search.query},setSearchQuery:function(e){r.filters.search.query=e},getLimit:function(){return r.filters.paging.limit},setLimit:function(e){return r.filters.paging.limit=e},getCurrentPage:function(){return r.filters.paging.current},setCurrentPage:function(e){r.filters.paging.current=e},getCurrent:function(){return r.current},setCurrent:function(e){r.current=e},setData:function(e){r.data=e,r.setCurrentPage(0),r.setListOrder(r.defaultOrderField),r.setSearchQuery(void 0)},getData:function(){return r.data},setFilteredData:function(e){r.filteredData=e},getFilteredData:function(){return r.filteredData},ajax:e(t.getRequestRestUrl(),{groupId:"@groupId",projectId:"@projectId"},{}),getRequestIndex:function(e){if(null!=r.getData())for(var t=0,n=r.getData().length;t<n;t++)if(e==r.getData()[t].id)return t;return-1},removeFromRequestList:function(e){r.data.splice(e,1)}};return r}]),angular.module("mockengerClientMainApp").factory("accountService",["$rootScope","$resource","apiEndpointsService",function(e,t,r){var n={currentAccount:null,getCurrentAccount:function(){return n.currentAccount},setCurrentAccount:function(e){n.currentAccount=e},ajax:t(r.getAccountRestUrl(),{accountId:"@accountId"},{update:{method:"PUT"}}),openAccountModal:function(t){null==t&&(t={id:null,firstName:null,lastName:null,role:"USER",username:null}),e.$broadcast("openAccountModal",t)}};return n}]),angular.module("mockengerClientMainApp").factory("accountListService",["$resource","apiEndpointsService",function(e,t){var r={data:null,getData:function(){return r.data},setData:function(e){r.data=e},ajax:e(t.getAccountRestUrl(),{accountId:"@accountId"},{})};return r}]),angular.module("mockengerClientMainApp").factory("loginService",["$modal",function(e){var t={showSignInForm:function(t){e.open({templateUrl:"/modules/main/views/loginForm.html",controller:"LoginController",backdrop:"static",keyboard:!1,scope:t})}};return t}]),angular.module("mockengerClientMainApp").factory("tokenService",["$injector","$cookies","$location","apiEndpointsService","SECRET_KEY",function(e,t,r,n,o){var a=e.get("$http"),u={"Content-type":"application/x-www-form-urlencoded",Authorization:"Basic "+o},s={getAccessToken:function(e,t,r,o){var s={method:"POST",url:n.getOAuth2AccessTokenUrl(),data:"username="+e+"&password="+t,headers:u};a(s).success(r).error(o)},getRefreshToken:function(e){var o={method:"POST",url:n.getOAuth2RefreshTokenUrl()+"&refresh_token="+t.get("refreshToken"),headers:u};a(o).success(function(r){t.put("accessToken",r.access_token),e.resolve()}).error(function(){r.path("/login"),e.reject()})}};return s}]),angular.module("mockengerClientMainApp").factory("eventListService",["$resource","apiEndpointsService",function(e,t){var r={get:{method:"GET",isArray:!0}},n={data:null,current:0,getCurrentPage:function(){return n.current},setCurrentPage:function(e){n.current=e},getData:function(){return n.data},setData:function(e){n.data=e},events:e(t.getEventRestUrl(),{eventId:"@eventId"},{},r)};return n}]);
//# sourceMappingURL=../maps/scripts/mockengerClientMain.js.map
