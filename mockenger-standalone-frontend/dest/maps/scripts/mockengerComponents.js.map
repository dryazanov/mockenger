{"version":3,"sources":["modules/components/mockengerClientComponents.js","modules/components/mockengerClient.constants.js","modules/components/filters/offsetFilter.js","modules/components/services/apiEndpointsService.js","modules/components/controllers/rootController.js","modules/components/directives/mkngrNavbar.js"],"names":["angular","module","input","start","slice","restUrls","projectTypes","API_BASE_PATH","headers","roles","getProjectRestUrl","getGroupRestUrl","$rootScope","$scope","$http","$location","ngToast","ENV","SECURITY","APP_VERSION","BUILD_DATE","env","version","IDLE","LOADING","setContentLoadingFailed","STATUS","ERROR","isContentLoading","status","isContentLoadingFailed","signOut","path","isAdmin","role","error","data","errors","length","errorMessage","error_description","err","msg","indexOf","className","dismissOnTimeout","content","create","i","directive","$cookies","element","factory","$injector","config","url","match","responseError","response","deferred","$q","defer","remove","get","getRefreshToken"],"mappings":"AAAAA,QAAAC,OAAA,+ZCIA,MAAA,UAAAC,EAAAC,GAEA,wBAAAD,EAAAE,MAAAD,6GAIA,GAAAE,wBAEAC,aAAA,wEAIA,MAAAC,GAAA,wDChBA,MAAAA,GAAA,8BAEAC,QAAA,WACA,MAAAD,GAAA,qBAEAE,MAAA,mECHA,MAAAF,GAAA,oBAEAG,kBAAA,WACA,MAAAH,GAAA,qDAGA,MAAAA,GAAA,mDAGA,MAAAF,GAAAK,oBAAA,iDAGA,MAAAL,GAAAM,kBAAA,2DAGA,MAAAJ,GAAA,6IAKA,iDAGA,0CAKAF,+KAGA,SAAAO,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,UAGAC,IAAAJ,EACAK,QAAAH,sBAKAI,KAAA,EACAC,QAAA,wGCzCAX,EAAAY,wBAAA,WACA,MAAAC,GAAAC,OAGAd,EAAAe,iBAAA,SAAAC,GACA,MAAAA,KAAAH,EAAAF,2DAOAM,uBAAA,SAAAD,GACA,MAAAA,KAAAH,EAAAC,OAGAd,EAAAkB,QAAA,WACAhB,EAAAiB,KAAA,YAGAnB,EAAAoB,QAAA,SAAAC,GACA,OAAAhB,+CAOA,OAAAA,IACA,YAAAgB,GAAArB,EAAAoB,QAAAC,2LAiBA,SAAAC,4BAEA,GAAA,MAAAA,EAAAC,KAAAC,QAAAF,EAAAC,KAAAC,OAAAC,OAAA,kEAGA,GAAAC,GAAA,IACA,IAAA,MAAAJ,EAAAC,KAAAI,kBAAA,CACA,GAAAC,GAAAN,EAAAC,KAAAD,gCAEAI,GAAAG,MAGA,gBAAAD,GAAA,iBAAAA,GAAAC,EAAAC,QAAA,oCAAA,GACAJ,EAAA,iGAGAA,EAAA,8CAIAA,GAAAJ,EAAAC,KAAAD,yBAIAS,UAAA,SACAC,kBAAA,EACAC,QAAAP,2BAOA,SAAAF,oCAEAU,kBACA,2BACA,YACAC,qDAMAC,UAAA,eAAA,WAAA,WAAA,SAAAC,EAAAhC,qGAIAiC,cAEA,qHAQAC,QAAA,2BAAA,KAAA,YAAA,WAAA,uBACArC,EAAAmC,EAAAG,kBAEA,SAAAC,SACA,OAAAA,EAAAC,IAAAC,MAAA,0IC9GAC,cAAA,SAAAC,GACA,GAAA,MAAAA,GAAA,KAAAA,EAAA7B,QACA,iBAAA6B,EAAAtB,KAAAD,MAAA,CACA,GAAAO,GAAAgB,EAAAtB,KAAAI,iBACA,IAAAE,EAAAC,QAAA,yBAAA,GAAAD,EAAAC,QAAA,yBAAA,EAAA,CACA,GAAAgB,GAAAC,EAAAC,cAEAX,GAAAY,OAAA,eACAT,EAAAU,IAAA,gBAAAC,gBAAAL","file":"scripts/mockengerComponents.js","sourcesContent":["angular.module('mockengerClientComponents', []);","'use strict';\n// DO NOT EDIT THIS FILE, EDIT THE GRUNT TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\nangular.module('mockengerClientComponents')\n\n.constant('ENV', 'dev')\n\n.constant('SECURITY', true)\n\n.constant('SECRET_KEY', 'Y2xpZW50YXBwOjEyMzQ1Ng==')\n\n.constant('API_BASE_PATH', 'http://localhost:8080')\n\n.constant('APP_VERSION', '0.1-SNAPSHOT')\n\n.constant('REQUESTS_PER_PAGE', 10)\n\n.constant('BUILD_DATE', '2015-10-05T12:36:03.673Z')\n\n;","'use strict';\n\nangular.module('mockengerClientComponents').filter('offset', function() {\n    return function(input, start) {\n        start = parseInt(start, 10);\n        return input.slice(start);\n    };\n});","'use strict';\n\nangular.module('mockengerClientComponents').factory('apiEndpointsService', ['API_BASE_PATH', function(API_BASE_PATH) {\n    var restUrls = {\n        getValuesetRestUrl: {\n            projectTypes: function() {\n                return API_BASE_PATH + '/valueset/projectTypes';\n            },\n            requestMethods: function() {\n                return API_BASE_PATH + '/valueset/requestMethods';\n            },\n            transformerTypes: function() {\n                return API_BASE_PATH + '/valueset/transformerTypes';\n            },\n            headers: function() {\n                return API_BASE_PATH + '/valueset/headers';\n            },\n            roles: function() {\n                return API_BASE_PATH + '/valueset/roles';\n            }\n        },\n        getEventRestUrl: function() {\n            return API_BASE_PATH + '/events/:eventId';\n        },\n        getProjectRestUrl: function() {\n            return API_BASE_PATH + '/projects/:projectId';\n        },\n        getAccountRestUrl: function() {\n            return API_BASE_PATH + '/accounts/:accountId';\n        },\n        getGroupRestUrl: function() {\n            return restUrls.getProjectRestUrl() + '/groups/:groupId';\n        },\n        getRequestRestUrl: function() {\n            return restUrls.getGroupRestUrl() + '/requests/:requestId';\n        },\n        getOAuth2AccessTokenUrl: function() {\n            return API_BASE_PATH + '/oauth/token?grant_type=password';\n        },\n        getOAuth2RefreshTokenUrl: function() {\n            return API_BASE_PATH + '/oauth/token?grant_type=refresh_token';\n        },\n        getOAuth2LogoutUrl: function() {\n            return API_BASE_PATH + '/oauth/revoke';\n        },\n        getUserData: function() {\n            return API_BASE_PATH + '/oauth/user';\n        }\n    };\n\n    return restUrls;\n}]);\n","'use strict';\n\nangular.module('mockengerClientComponents')\n    .controller('rootController', ['$rootScope', '$scope', '$http', '$location', 'ngToast', 'ENV', 'SECURITY', 'APP_VERSION', 'BUILD_DATE',\n        function ($rootScope, $scope, $http, $location, ngToast, ENV, SECURITY, APP_VERSION, BUILD_DATE) {\n\n            $scope.app = {\n                env: ENV,\n                version: APP_VERSION,\n                buildDate: BUILD_DATE\n            };\n\n            var STATUS = {\n                IDLE: 0,\n                LOADING: 1,\n                ERROR: 2\n            };\n\n            $scope.setContentLoading = function () {\n                return STATUS.LOADING;\n            };\n\n            $scope.setContentReady = function () {\n                return STATUS.IDLE;\n            };\n\n            $scope.setContentLoadingFailed = function () {\n                return STATUS.ERROR;\n            };\n\n            $scope.isContentLoading = function (status) {\n                return status === STATUS.LOADING;\n            };\n\n            $scope.isContentReady = function (status) {\n                return status === STATUS.IDLE;\n            };\n\n            $scope.isContentLoadingFailed = function (status) {\n                return status === STATUS.ERROR;\n            };\n\n            $scope.signOut = function() {\n                $location.path('/logout');\n            }\n\n            $scope.isAdmin = function(role) {\n                if (SECURITY) {\n                    return (role === 'ADMIN');\n                }\n                return true;\n            }\n\n            $scope.isManagerOrAdmin = function(role) {\n                if (SECURITY) {\n                    return (role === 'MANAGER' || $scope.isAdmin(role));\n                }\n                return true;\n            }\n\n            $scope.getErrorStyle = function(input) {\n                return ($scope.hasError(input) ? 'has-error' : '');\n            }\n\n            $scope.hasError = function(input) {\n                return (input.$invalid && !input.$pristine);\n            }\n\n            $scope.showGreenMessage = function(text) {\n                ngToast.create(text);\n            }\n\n            $scope.showRedMessage = function(error) {\n                if (error != null && error.data != null) {\n                    if (error.data.errors != null && error.data.errors.length > 0) {\n                        $scope.showErrorsFromList(error.data.errors);\n                    } else if (error.data.error != null) {\n                        var errorMessage = null;\n                        if (error.data.error_description != null) {\n                            var err = error.data.error;\n                            var msg = error.data.error_description;\n                            errorMessage = msg;\n\n                            if (SECURITY) {\n                                if (err == 'unauthorized' || (err == 'invalid_token' && msg.indexOf('Invalid refresh token (expired)') >= 0)) {\n                                    errorMessage = \"Authorization required\";\n                                    $location.path('/login');\n                                } else if (err == 'invalid_grant' && msg.indexOf('Bad credentials') >= 0) {\n                                    errorMessage = \"The username or password is incorrect\";\n                                }\n                            }\n                        } else {\n                            errorMessage = error.data.error;\n                        }\n                        if (errorMessage != null) {\n                            ngToast.create({\n                                className: 'danger',\n                                dismissOnTimeout: false,\n                                content: errorMessage\n                            });\n                        }\n                    }\n                }\n            }\n\n            $scope.showErrorsFromList = function(errors) {\n                for (var i = 0, l = errors.length; i < l; i++) {\n                    ngToast.create({\n                        className: 'danger',\n                        dismissOnTimeout: false,\n                        content: errors[i]\n                    });\n                }\n            }\n        }\n]);\n","angular.module('mockengerClientComponents')\n    .directive('mkngrNavbar', ['$cookies', 'SECURITY', function($cookies, SECURITY) {\n        return {\n            restrict: 'E',\n            templateUrl: '/modules/components/directives/mkngrNavbar.html',\n            link: function(scope, element) {\n                if (SECURITY) {\n                    scope.user = null;\n                    if ($cookies.get('user') != null) {\n                        scope.user = angular.fromJson($cookies.get('user'));\n                    }\n                }\n            }\n        };\n    }]);"],"sourceRoot":"/source/"}