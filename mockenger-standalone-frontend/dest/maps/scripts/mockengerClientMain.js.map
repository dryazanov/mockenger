{"version":3,"sources":["modules/main/app.js","modules/main/controllers/IndexPageController.js","modules/main/controllers/ProjectPageController.js","modules/main/controllers/GroupListController.js","modules/main/controllers/RequestListController.js","modules/main/controllers/RequestController.js","modules/main/controllers/GroupController.js","modules/main/controllers/LoginController.js","modules/main/controllers/LogoutController.js","modules/main/controllers/LoginPageController.js","modules/main/controllers/AdminPageController.js","modules/main/controllers/AccountController.js","modules/main/controllers/AccountListController.js","modules/main/controllers/EventListController.js","modules/main/services/valuesetService.js","modules/main/services/projectListService.js","modules/main/services/groupService.js","modules/main/services/groupListService.js","modules/main/services/requestService.js","modules/main/services/requestListService.js","modules/main/services/accountService.js","modules/main/services/accountListService.js","modules/main/services/loginService.js"],"names":["$routeProvider","templateUrl","controller","resolve","currentProject","$route","projectListService","projectId","current","params","ajax","get","when","template","horizontalPosition","dismissButton","timeout","$confirmModalDefaults","module","$rootScope","$scope","$filter","$confirm","valuesetService","availableProjectTypes","$watch","value","code","getProjectTypes","projectTypes","response","getResponseHeaders","query","setData","alerts","editProject","project","angular","copy","deleteProject","text","name","then","showGreenMessage","errorResponse","showRedMessage","id","save","projectModal","modal","getProjects","groupListService","requestListService","requestMethods","headerList","setCurrent","getRequestMethods","obj","getTransformerTypes","getHeaders","transformerTypes","isActive","group","getCurrent","loadGroupRequests","setUrlForNewRequests","API_BASE_PATH","type","paramsToSend","groupId","createGroup","index","deleteGroup","groupService","delete","confirmService","hideDialog","method","path","transformers","headers","values","parameters","body","mockResponse","requestToDelete","getRequestIndex","data","errors","Array","getCurrentPage","pageCount","prevPage","getListOrder","getSearchQuery","request","setFilteredData","getData","undefined","filters","search","getFilteredData","order","i","l","range","push","setCurrentPage","n","isPrevPageDisabled","requestService","REGEXP","bodyTransformerTypes","XPATH","source","addTransformer","transformerType","pattern","isMethodWithBody","selectMethod","addParameter","deleteParameter","httpStatus","pushKeyValuePair","splice","addParamTransformer","KEY_VALUE","deleteTransformer","saveRequest","requestParams","update","isPrevRequestDisabled","filteredDataCurrentIndex","length","$on","event","urlToSendRequests","groupToSave","groupForm","$setPristine","groupModal","addGroupToList","$cookies","$location","apiEndpointsService","tokenService","put","refresh_token","getUserData","success","error","status","config","$http","remove","loginService","showSignInForm","createAccount","editAccount","account","accountService","openAccountModal","getRoles","roles","accountListService","accountModal","$","currentAccount","repassword","saveAccount","password","accountForm","$invalid","updateAccountRequest","accountId","username","greenMessage","saveAccountRequest","getAccountList","deleteAccount","updateAccountList","eventListService","updateEventList","types","page","sort","events","totalPages","nextPage","eventEntityType","factory","isArray","$resource","getValuesetRestUrl","methodGet","ProjectService","dataToSet","currentToSet","forwarding","recordTo","$broadcast","GroupService","GroupListService","getGroupRestUrl","url","urlForNewRequests","requestId","RequestListService","filteredData","this","defaultOrderField","limit","setLimit","paging","setSearchQuery","firstName","lastName","AccountListService","getAccountRestUrl","scope","backdrop","LoginService","$injector","SECRET_KEY","Content-type","Authorization","TokenService","successCallback","errorCallback","getOAuth2AccessTokenUrl","deferred","getOAuth2RefreshTokenUrl","EventListService","getEventRestUrl","eventId"],"mappings":"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","file":"scripts/mockengerClientMain.js","sourcesContent":["'use strict';\n\nangular.module('mockengerClientMainApp', [\n        'mockengerClientComponents',\n        'ngCookies',\n        'ngMessages',\n        'ngResource',\n        'ngAnimate',\n        'ngRoute',\n        'ngSanitize',\n        'ngTouch',\n        'ngToast',\n        'ui.bootstrap',\n        'angular-confirm'\n    ])\n    .config(['$locationProvider', '$routeProvider', '$httpProvider', 'ngToastProvider', 'SECURITY',\n        function ($locationProvider, $routeProvider, $httpProvider, ngToastProvider, SECURITY) {\n            //$locationProvider.html5Mode(true);\n            $routeProvider\n                .when('/index', {\n                    templateUrl: '/modules/main/views/indexView.html',\n                    controller: 'IndexPageController'\n                })\n                .when('/project/:projectId', {\n                    templateUrl: '/modules/main/views/projectView.html',\n                    controller: 'ProjectPageController',\n                    resolve: {\n                        currentProject: ['$route', 'projectListService', function($route, projectListService) {\n                            var projectId = $route.current.params.projectId;\n                            projectListService.projectId = projectId;\n                            return projectListService.ajax.get({projectId : projectId});\n                        }]\n                    }\n                })\n                .when('/admin', {\n                    templateUrl: '/modules/main/views/adminView.html',\n                    controller: 'AdminPageController'\n                })\n                .otherwise({\n                    redirectTo: '/index'\n                });\n\n            if (SECURITY) {\n                $routeProvider\n                    .when('/login', {\n                        template: ' ',\n                        controller: 'LoginPageController'\n                    })\n                    .when('/logout', {\n                        template: ' ',\n                        controller: 'LogoutController'\n                    })\n                    .otherwise({\n                        redirectTo: '/login'\n                    });\n\n                $httpProvider.interceptors.push('httpProviderInterceptor');\n            }\n\n            ngToastProvider.configure({\n                animation: 'fade',\n                horizontalPosition: 'center',\n                dismissButton: true,\n                timeout: 4000\n            });\n    }])\n    .run(function($confirmModalDefaults) {\n         $confirmModalDefaults.templateUrl = '/modules/main/views/confirm.html';\n    });","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('IndexPageController', ['$rootScope', '$scope', '$filter', '$confirm', 'projectListService', 'valuesetService',\n        function ($rootScope, $scope, $filter, $confirm, projectListService, valuesetService) {\n            var projectModal = $('#projectModal');\n            $scope.projectListService = projectListService;\n            $scope.projectsList = {};\n            $scope.availableProjectTypes = {};\n\n            // Change value to uppercase in the field 'Code'\n            $scope.$watch('currentProject.code', function(value) {\n                if (value != null) {\n                    $scope.currentProject.code = $filter('uppercase')(value);\n                }\n            });\n\n            $scope.getProjectTypes = function() {\n                valuesetService.projectTypes.get(function(response, getResponseHeaders) {\n                    $scope.availableProjectTypes = response;\n                }, function(errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.getProjects = function() {\n                projectListService.ajax.query(function(response, getResponseHeaders) {\n                    projectListService.setData(response);\n                }, function(errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.createProject = function() {\n                $scope.alerts = [];\n                $scope.currentProject = {};\n                $scope.projectForm.$setPristine();\n                projectModal.modal({});\n            };\n\n            $scope.editProject = function(project) {\n                $scope.alerts = [];\n                $scope.currentProject = {};\n                angular.copy(project, $scope.currentProject);\n                projectModal.modal({});\n            };\n\n            $scope.deleteProject = function(project) {\n                $confirm({\n                    text: \"Do you really want to delete project '\" + project.name + \"' with all its groups and mocks?\"\n                }).then(function() {\n                    projectListService.ajax.delete({projectId: project.id}, function(response, getResponseHeaders) {\n                        $scope.getProjects();\n                        $scope.showGreenMessage('Project <b>' + project.name + '</b> deleted');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                });\n            };\n\n            $scope.saveProject = function(project) {\n                if (project.id != null) {\n                    projectListService.ajax.update({projectId: project.id}, project, function(response, getResponseHeaders) {\n                        projectModal.modal('hide');\n                        $scope.getProjects();\n                        $scope.showGreenMessage('Project <b>' + project.name + '</b> successfully updated');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                } else {\n                    projectListService.ajax.save(project, function() {\n                        projectModal.modal('hide');\n                        $scope.getProjects();\n                        $scope.showGreenMessage('Project <b>' + project.name + '</b> has been created');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                }\n            };\n\n            projectListService.ajax.query(function(response) {\n                projectListService.setData(response);\n                $scope.getProjectTypes();\n            }, function (errorResponse) {\n                $scope.showRedMessage(errorResponse);\n            });\n        }\n    ]\n);\n","'use strict';\n\nangular.module('mockengerClientMainApp').controller('ProjectPageController', ['$scope', 'currentProject', 'projectListService', 'groupListService', 'requestListService', 'valuesetService',\n        function($scope, currentProject, projectListService, groupListService, requestListService, valuesetService) {\n\n    $scope.currentProject = currentProject;\n    $scope.groupListService = groupListService;\n    $scope.requestListService = requestListService;\n\n    // ValueSets\n    $scope.requestMethods = [];\n    $scope.transformerTypes = [];\n    $scope.headerList = [];\n\n    // Reset current group\n    groupListService.setCurrent(null);\n    groupListService.setData(null);\n\n    currentProject.$promise.then(function (obj) {\n        projectListService.setCurrent(obj);\n        $scope.getRequestMethods(obj.id);\n        $scope.getTransformerTypes();\n        $scope.getHeaders();\n\n        groupListService.ajax.query({projectId: currentProject.id}, function(response, getResponseHeaders) {\n            groupListService.setData(response);\n        }, function (errorResponse) {\n            $scope.showRedMessage(errorResponse);\n        });\n    }, function(errorResponse) {\n        $scope.showRedMessage(errorResponse);\n    });\n\n    $scope.getRequestMethods = function(projectId) {\n        valuesetService.requestMethods.get({projectId: projectId}, function(response, getResponseHeaders) {\n            $scope.requestMethods = response;\n        }, function(errorResponse) {\n            $scope.showRedMessage(errorResponse);\n        });\n    }\n\n    $scope.getTransformerTypes = function() {\n        valuesetService.transformerTypes.get(function(response, getResponseHeaders) {\n            $scope.transformerTypes = response;\n        }, function(errorResponse) {\n            $scope.showRedMessage(errorResponse);\n        });\n    }\n\n    $scope.getHeaders = function() {\n        valuesetService.headers.get(function(response, getResponseHeaders) {\n            $scope.headerList = response;\n        }, function(errorResponse) {\n            $scope.showRedMessage(errorResponse);\n        });\n    }\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('GroupListController', [\n        '$scope',\n        '$confirm',\n        'projectListService',\n        'groupService',\n        'groupListService',\n        'requestListService',\n        'API_BASE_PATH',\n\n        function($scope, $confirm, projectListService, groupService, groupListService, requestListService, API_BASE_PATH) {\n            requestListService.setCurrent(null);\n            requestListService.setData(null);\n\n            $scope.isActive = function(group) {\n                return (group === groupListService.getCurrent() ? true : false);\n            }\n\n            $scope.loadGroupRequests = function(group) {\n                requestListService.setCurrent(null);\n                groupListService.setCurrent(group);\n                groupListService.setUrlForNewRequests(API_BASE_PATH + \"/\" + projectListService.getCurrent().type + \"/\" + group.id + \"/\");\n\n                var paramsToSend = {\n                    projectId: projectListService.getCurrent().id,\n                    groupId: groupListService.getCurrent().id\n                };\n                requestListService.ajax.query(paramsToSend, function(response, getResponseHeaders) {\n                    requestListService.setData(response);\n                }, function (errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.createGroup = function() {\n                groupService.openGroupModal(projectListService.getCurrent(), null);\n            }\n\n            $scope.editGroup = function(group, index) {\n                groupService.openGroupModal(projectListService.getCurrent(), group);\n            }\n\n            $scope.deleteGroup = function(index, group) {\n                $confirm({\n                    text: \"Do you really want to delete group '\" + group.name + \"' with all its mocks?\"\n                }).then(function() {\n                    if (groupListService.getData() != null && groupListService.getData()[index] != null) {\n                        groupService.ajax.delete({projectId: projectListService.getCurrent(), groupId: group.id}, function(response, getResponseHeaders) {\n                            if (group == groupListService.getCurrent()) {\n                                groupListService.setCurrent(null);\n                                requestListService.setData(null);\n                                requestListService.setCurrent(null);\n                            }\n                            groupListService.removeFromGroupList(index);\n                            $scope.showGreenMessage('Group <b>' + group.name + '</b> deleted');\n                            confirmService.hideDialog();\n                        }, function(errorResponse) {\n                            $scope.showRedMessage(errorResponse);\n                            confirmService.hideDialog();\n                        });\n                    }\n                });\n            }\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('RequestListController', [\n        '$scope',\n        '$filter',\n        '$confirm',\n        'projectListService',\n        'groupListService',\n        'requestService',\n        'requestListService',\n        'REQUESTS_PER_PAGE',\n\n        function($scope, $filter, $confirm, projectListService, groupListService, requestService, requestListService, REQUESTS_PER_PAGE) {\n            $scope.filteredData = {};\n            requestListService.setLimit(REQUESTS_PER_PAGE);\n\n            $scope.createRequest = function() {\n                requestListService.setCurrent({\n                    id: null,\n                    groupId: groupListService.getCurrent().id,\n                    name: null,\n                    method: 'POST',\n                    path: {\n                        transformers: null,\n                        value: null\n                    },\n                    headers: {\n                        transformers: null,\n                        values: []\n                    },\n                    parameters: {\n                        transformers: null,\n                        values: []\n                    },\n                    body: {\n                        transformers: null,\n                        value: null\n                    },\n                    mockResponse: null\n                });\n            }\n\n            $scope.deleteRequest = function(requestToDelete) {\n                $confirm({\n                    text: \"Do you really want to delete this request?\"\n                }).then(function() {\n                    var index = requestListService.getRequestIndex(requestToDelete.id);\n                    if (index < 0) {\n                        $scope.showRedMessage({data: {errors: new Array('Delete process aborted. Cannot find request in the list')}});\n                    } else {\n                        var paramsToSend = {\n                            projectId: projectListService.getCurrent().id,\n                            groupId: groupListService.getCurrent().id,\n                            requestId: requestToDelete.id\n                        };\n                        requestService.ajax.delete(paramsToSend, function(response, getResponseHeaders) {\n                            $scope.showGreenMessage('Mock-request <b>' + requestToDelete.name + '</b> deleted');\n                            requestListService.removeFromRequestList(index);\n\n                            if ((requestListService.getCurrentPage() + 1) > $scope.pageCount()) {\n                                $scope.prevPage();\n                            }\n                        }, function(errorResponse) {\n                            $scope.showRedMessage(errorResponse);\n                        });\n                    }\n                });\n            };\n\n            $scope.$watchGroup([requestListService.getListOrder, requestListService.getSearchQuery], function() {\n                requestListService.setCurrentPage(0);\n            });\n\n            $scope.selectRequest = function(index, request) {\n                requestListService.filteredDataCurrentIndex = $scope.getOffset() + index;\n                requestListService.setFilteredData(requestListService.getData());\n                if (requestListService.filters.search.query != undefined && requestListService.filters.search.query != '') {\n                    requestListService.setFilteredData($filter('filter')(requestListService.getFilteredData(), requestListService.filters.search.query));\n                }\n                requestListService.setFilteredData($filter('orderBy')(requestListService.getFilteredData(), requestListService.filters.order));\n                requestListService.setCurrent(request);\n            }\n\n            $scope.range = function() {\n                var range = [];\n                for (var i = 0, l = $scope.pageCount(); i < l; i++) {\n                    range.push(i);\n                }\n                return range;\n            };\n\n            $scope.prevPage = function() {\n                if (requestListService.getCurrentPage() > 0) {\n                    requestListService.setCurrentPage(requestListService.getCurrentPage() - 1);\n                }\n            };\n\n            $scope.nextPage = function() {\n                if (requestListService.getCurrentPage() < $scope.pageCount() - 1) {\n                    requestListService.setCurrentPage(requestListService.getCurrentPage() + 1);\n                }\n            };\n\n            $scope.isActive = function(n) {\n                return (requestListService.getCurrentPage() == n);\n            };\n\n            $scope.isPrevPageDisabled = function() {\n                return (requestListService.getCurrentPage() === 0);\n            };\n\n            $scope.isNextPageDisabled = function() {\n                return (requestListService.getCurrentPage() === $scope.pageCount() - 1);\n            };\n\n            $scope.getOffset = function() {\n                return (requestListService.getCurrentPage() * requestListService.getLimit());\n            }\n\n            $scope.pageCount = function() {\n                if (requestListService.getData() != null) {\n                    var filtered = $filter('filter')(requestListService.getData(), requestListService.getSearchQuery());\n                    return Math.ceil(filtered.length / requestListService.getLimit());\n                }\n                return 0;\n            };\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('RequestController',[\n        '$scope',\n        '$confirm',\n        'projectListService',\n        'groupListService',\n        'requestService',\n        'requestListService',\n\n        function ($scope, $confirm, projectListService, groupListService, requestService, requestListService) {\n            var REGEXP = 'REGEXP';\n            var KEY_VALUE = 'KEY_VALUE';\n            var XPATH = 'XPATH';\n\n            $scope.bodyTransformerTypes = new Array(REGEXP, XPATH);\n\n            var pushKeyValuePair = function(source) {\n                source.push({\n                    key: \"\",\n                    value: \"\"\n                });\n            }\n\n            var addTransformer = function(source, transformerType) {\n                source.push({\n                    type: transformerType,\n                    pattern: null,\n                    replacement: null\n                });\n            }\n\n            var isMethodWithBody = function(method) {\n                return (method === 'POST' || method === 'PUT' || method === 'PATCH');\n            }\n\n            $scope.selectMethod = function(method) {\n                requestListService.getCurrent().method = method;\n            }\n\n            $scope.selectTransformerType = function(type, transformer) {\n                transformer.type = type;\n            }\n\n            $scope.addParameter = function() {\n                if (requestListService.getCurrent().parameters.values == null) {\n                    requestListService.getCurrent().parameters.values = [];\n                }\n                pushKeyValuePair(requestListService.getCurrent().parameters.values);\n            }\n\n            $scope.deleteParameter = function(index) {\n                $confirm({\n                    text: \"Do you really want to delete this parameter?\"\n                }).then(function() {\n                    var source = requestListService.getCurrent().parameters.values;\n                    if (source != null && source[index] != null) {\n                        source.splice(index, 1);\n                    }\n                });\n            }\n\n            $scope.addRequestHeader = function() {\n                if (requestListService.getCurrent().headers.values == null) {\n                    requestListService.getCurrent().headers.values = [];\n                }\n                pushKeyValuePair(requestListService.getCurrent().headers.values);\n            }\n\n            $scope.addResponseHeader = function() {\n                if (requestListService.getCurrent().mockResponse == null) {\n                    requestListService.getCurrent().mockResponse = {\n                        headers: [],\n                        httpStatus: null,\n                        body: null\n                    }\n                } else {\n                    if (requestListService.getCurrent().mockResponse.headers == null) {\n                        requestListService.getCurrent().mockResponse.headers = [];\n                    }\n                }\n                pushKeyValuePair(requestListService.getCurrent().mockResponse.headers);\n            }\n\n            $scope.deleteHeader = function(index, source) {\n                $confirm({\n                    text: \"Do you really want to delete this header?\"\n                }).then(function() {\n                    if (source != null && source[index] != null) {\n                        source.splice(index, 1);\n                    }\n                });\n            }\n\n            // Add transformer for Path\n            $scope.addPathTransformer = function() {\n                if (requestListService.getCurrent().path.transformers == null) {\n                    requestListService.getCurrent().path.transformers = [];\n                }\n                addTransformer(requestListService.getCurrent().path.transformers, REGEXP);\n            }\n\n            // Add transformer for Parameters\n            $scope.addParamTransformer = function() {\n                if (requestListService.getCurrent().parameters.transformers == null) {\n                    requestListService.getCurrent().parameters.transformers = [];\n                }\n                addTransformer(requestListService.getCurrent().parameters.transformers, KEY_VALUE);\n            }\n\n            // Add transformer for Headers\n            $scope.addHeaderTransformer = function() {\n                if (requestListService.getCurrent().headers.transformers == null) {\n                    requestListService.getCurrent().headers.transformers = [];\n                }\n                addTransformer(requestListService.getCurrent().headers.transformers, KEY_VALUE);\n            }\n\n            // Add transformer for Request Body\n            $scope.addRequestBodyTransformer = function() {\n                if (requestListService.getCurrent().body.transformers == null) {\n                    requestListService.getCurrent().body.transformers = [];\n                }\n                addTransformer(requestListService.getCurrent().body.transformers, REGEXP);\n            }\n\n            $scope.deleteTransformer = function(index, source) {\n                $confirm({\n                    text: \"Do you really want to delete this transformer?\"\n                }).then(function() {\n                    if (source != null && source[index] != null) {\n                        source.splice(index, 1);\n                    }\n                });\n            }\n\n            var isNameOk = function(name) {\n                if (!name) {\n                    $scope.showRedMessage({data: {errors: new Array('Field <b>Name</b> is required')}});\n                    return false;\n                }\n                return true;\n            }\n\n            var isResponseDataOk = function(mockResponse) {\n                if (!mockResponse || !mockResponse.httpStatus) {\n                    $scope.showRedMessage({data: {errors: new Array('Field <b>HTTP status code</b> is required')}});\n                    return false;\n                }\n                return true;\n            }\n\n            var isHttpMethodOk = function(method) {\n                if (!method) {\n                    $scope.showRedMessage({data: {errors: new Array('<b>Method</b> may not be null or empty')}});\n                    return false;\n                }\n                return true;\n            }\n\n            $scope.saveRequest = function(request) {\n                if (!isNameOk(request.name) || !isResponseDataOk(request.mockResponse) || !isHttpMethodOk(request.method)) {\n                    return;\n                }\n                if (!isMethodWithBody(request.method)) {\n                    request.body = null;\n                }\n\n                var requestParams = {\n                    projectId: projectListService.getCurrent().id,\n                    groupId: groupListService.getCurrent().id\n                }\n                if (request.id != null) {\n                    requestParams['requestId'] = request.id;\n                    requestService.ajax.update(requestParams, request, function() {\n                        $scope.showGreenMessage('Mock-request <b>' + request.name + '</b> successfully updated');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                } else {\n                    requestService.ajax.save(requestParams, request, function(response) {\n                        requestListService.getData().push(response);\n                        requestListService.setFilteredData(response);\n                        requestListService.setCurrent(response);\n                        $scope.showGreenMessage('Mock-request <b>' + response.name + '</b> has been created');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                }\n            }\n\n            $scope.isPrevRequestDisabled = function() {\n                if (requestListService.getCurrent().id == null) {\n                    return true;\n                } else {\n                    return (requestListService.filteredDataCurrentIndex <= 0);\n                }\n            }\n\n            $scope.isNextRequestDisabled = function() {\n                if (requestListService.getCurrent().id == null) {\n                    return true;\n                } else {\n                    return (requestListService.filteredDataCurrentIndex >= requestListService.getFilteredData().length - 1);\n                }\n            }\n\n            $scope.nextRequest = function() {\n                requestListService.filteredDataCurrentIndex++;\n                requestListService.setCurrent(requestListService.getFilteredData()[requestListService.filteredDataCurrentIndex])\n            }\n\n            $scope.prevRequest = function() {\n                requestListService.filteredDataCurrentIndex--;\n                requestListService.setCurrent(requestListService.getFilteredData()[requestListService.filteredDataCurrentIndex]);\n            }\n\n            $scope.isRequestTabDisabled = function() {\n                return (requestListService.getCurrent().method != null && isMethodWithBody(requestListService.getCurrent().method) ? false : true);\n            }\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('GroupController',['$scope', 'projectListService', 'groupService', 'groupListService', 'API_BASE_PATH',\n        function ($scope, projectListService, groupService, groupListService, API_BASE_PATH) {\n            var groupModal = $('#groupModal');\n            $scope.groupToSave = {};\n            $scope.urlToSendRequests = null;\n\n            $scope.$on('openGroupModal', function(event, group) {\n                if (group.id == null) {\n                    $scope.urlToSendRequests = null;\n                    $scope.groupToSave = group;\n                } else {\n                    $scope.urlToSendRequests = API_BASE_PATH + \"/\" + projectListService.getCurrent().type + \"/\" + group.id + \"/\"\n                    $scope.groupToSave = {};\n                    angular.copy(group, $scope.groupToSave);\n                }\n                $scope.groupForm.$setPristine();\n                groupModal.modal({});\n            });\n\n            $scope.saveGroup = function(group) {\n                if (group.id != null) {\n                    groupService.ajax.update({groupId: group.id}, group, function(response, getResponseHeaders) {\n                        groupModal.modal('hide');\n                        for (var i = 0, l = groupListService.getData().length; i < l; i++) {\n                            if (groupListService.getData()[i].id == response.id) {\n                                groupListService.getData()[i] = response;\n                                break;\n                            }\n                        }\n                        $scope.showGreenMessage('Group <b>' + group.name + '</b> successfully updated');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                } else {\n                    groupService.ajax.save(group, function(response) {\n                        groupModal.modal('hide');\n                        groupListService.addGroupToList(response);\n                        $scope.showGreenMessage('Group <b>' + group.name + '</b> has been created');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                }\n            };\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('LoginController', ['$http', '$cookies', '$scope', '$location', 'apiEndpointsService', 'tokenService',\n        function($http, $cookies, $scope, $location, apiEndpointsService, tokenService) {\n            $scope.username = \"\";\n            $scope.password = \"\";\n\n            $scope.doSignIn = function() {\n                tokenService.getAccessToken($scope.username, $scope.password, function(data, status, headers, config) {\n                    $cookies.put('accessToken', data.access_token);\n                    $cookies.put('refreshToken', data.refresh_token);\n\n                    $http.get(apiEndpointsService.getUserData()).success(function(data) {\n                        $cookies.put('user', angular.toJson(data));\n                        $location.path('/index');\n                    }).error(function(data, status, headers, config) {\n                        $scope.showRedMessage({data: data});\n                    });\n                }, function(data, status, headers, config) {\n                    $scope.showRedMessage({data: data});\n                });\n            }\n        }\n]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('LogoutController', ['$scope', '$http', '$cookies', '$location', 'apiEndpointsService',\n        function($scope, $http, $cookies, $location, apiEndpointsService) {\n            $http.post(apiEndpointsService.getOAuth2LogoutUrl() + \"?token=\" + $cookies.get('accessToken'), null).success(function() {\n                $cookies.remove('accessToken');\n                $cookies.remove('refreshToken');\n                $cookies.remove('user');\n\n                $location.path(\"/login\");\n            }).error(function(data, status, headers, config) {\n                $scope.showRedMessage({data: data});\n            });\n    }\n]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('LoginPageController', ['$scope', '$cookies', '$location', 'loginService',\n        function ($scope, $cookies, $location, loginService) {\n            if ($cookies.get('accessToken') != null && $cookies.get('refreshToken') != null && $cookies.get('user')) {\n                $location.path('/index');\n            } else {\n                loginService.showSignInForm($scope);\n            }\n        }\n]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('AdminPageController',['$scope', 'accountService', 'accountListService', 'valuesetService', 'API_BASE_PATH',\n        function ($scope, accountService, accountListService, valuesetService, API_BASE_PATH) {\n\n            $scope.roles = {};\n\n            $scope.createAccount = function() {\n                accountService.openAccountModal(null);\n            };\n\n            $scope.editAccount = function(account) {\n                accountService.openAccountModal(account);\n            };\n\n            $scope.getRoles = function() {\n                valuesetService.roles.get(function(response, getResponseHeaders) {\n                    $scope.roles = response;\n                }, function(errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.getRoles();\n\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('AccountController', ['$scope', 'accountService', 'accountListService',\n        function($scope, accountService, accountListService) {\n\n            var accountModal = $('#accountModal');\n            $scope.currentAccount = {};\n            $scope.repassword = \"\";\n\n            $scope.$on('openAccountModal', function(event, account) {\n                angular.copy(account, $scope.currentAccount);\n                $scope.accountForm.$setPristine();\n                accountModal.modal({});\n            });\n\n            $scope.saveAccount = function(account) {\n                account.password = account.password || \"\";\n                repassword.value = repassword.value || \"\";\n\n                if (account.password !== repassword.value) {\n                    $scope.accountForm.repassword.$invalid = true;\n                } else {\n                    $scope.accountForm.repassword.$invalid = false;\n\n                    if (account.id != null) {\n                        $scope.updateAccountRequest(account, {accountId: account.id}, 'Account <b>' + account.username + '</b> successfully updated');\n                    } else {\n                        $scope.saveAccountRequest(account, 'Account <b>' + account.username + '</b> has been created');\n                    }\n                }\n            };\n\n            $scope.updateAccountRequest = function(account, requestParams, greenMessage) {\n                accountService.ajax.update(requestParams, account, function() {\n                    accountModal.modal('hide');\n                    $scope.showGreenMessage(greenMessage);\n                    $scope.getAccountList();\n                }, function(errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.saveAccountRequest = function(account, greenMessage) {\n                accountService.ajax.save(account, function() {\n                    accountModal.modal('hide');\n                    $scope.showGreenMessage(greenMessage);\n                    $scope.getAccountList();\n                }, function(errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.getAccountList = function() {\n                accountListService.ajax.query(function(response) {\n                    accountListService.setData(response);\n                }, function (errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('AccountListController', ['$scope', '$confirm', 'accountListService',\n        function($scope, $confirm, accountListService) {\n            $scope.accountListService = accountListService;\n\n            // Get account list\n            $scope.updateAccountList = function() {\n                accountListService.ajax.query(function(response) {\n                    accountListService.setData(response);\n                }, function (errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            }\n\n            $scope.deleteAccount = function(account) {\n                $confirm({\n                    text: \"Do you really want to delete account '\" + account.username + \"'?\"\n                }).then(function() {\n                    accountListService.ajax.delete({accountId: account.id}, function(response, getResponseHeaders) {\n                        $scope.updateAccountList();\n                        $scope.showGreenMessage('Account <b>' + account.username + '</b> has been deleted');\n                    }, function(errorResponse) {\n                        $scope.showRedMessage(errorResponse);\n                    });\n                });\n            }\n\n            $scope.updateAccountList();\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .controller('EventListController', ['$scope', '$confirm', 'eventListService',\n        function($scope, $confirm, eventListService) {\n            $scope.eventEntityType = \"ACCOUNT\";\n            $scope.eventListService = eventListService;\n\n            // Get event list\n            $scope.updateEventList = function(types, page, sort) {\n                eventListService.events.get({types: types, page: page, sort: sort}, function(response) {\n                    eventListService.setCurrentPage(page);\n                    eventListService.setData(response);\n                }, function (errorResponse) {\n                    $scope.showRedMessage(errorResponse);\n                });\n            };\n\n            $scope.pageCount = function() {\n                if (eventListService.getData() != null) {\n                    return eventListService.getData().totalPages;\n                }\n                return 0;\n            };\n\n            $scope.range = function() {\n                var range = [];\n                for (var i = 0, l = $scope.pageCount(); i < l; i++) {\n                    range.push(i);\n                }\n                return range;\n            };\n\n            $scope.isActive = function(n) {\n                return (eventListService.getCurrentPage() == n);\n            };\n\n            $scope.isPrevPageDisabled = function() {\n                return (eventListService.getCurrentPage() === 0);\n            };\n\n            $scope.isNextPageDisabled = function() {\n                return (eventListService.getCurrentPage() === $scope.pageCount() - 1);\n            };\n\n            $scope.prevPage = function() {\n                if (eventListService.getCurrentPage() > 0) {\n                    eventListService.setCurrentPage(eventListService.getCurrentPage() - 1);\n                    $scope.updateEventList($scope.eventEntityType, eventListService.getCurrentPage());\n                }\n            };\n\n            $scope.nextPage = function() {\n                if (eventListService.getCurrentPage() < $scope.pageCount() - 1) {\n                    eventListService.setCurrentPage(eventListService.getCurrentPage() + 1);\n                    $scope.updateEventList($scope.eventEntityType, eventListService.getCurrentPage());\n                }\n            };\n\n            $scope.updateEventList($scope.eventEntityType, 0);\n}]);","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .factory('valuesetService', ['$resource', 'apiEndpointsService',\n        function ($resource, apiEndpointsService) {\n\n            var methodGet = {\n                get: {\n                    method:'GET',\n                    isArray: true\n                }\n            }\n\n            var ValueSetService = {\n                projectTypes: $resource(apiEndpointsService.getValuesetRestUrl.projectTypes(), {}, methodGet),\n                requestMethods: $resource(apiEndpointsService.getValuesetRestUrl.requestMethods(), { projectId: '@projectId' }, methodGet),\n                transformerTypes: $resource(apiEndpointsService.getValuesetRestUrl.transformerTypes(), {}, methodGet),\n                headers: $resource(apiEndpointsService.getValuesetRestUrl.headers(), {}, methodGet),\n                roles: $resource(apiEndpointsService.getValuesetRestUrl.roles(), {}, methodGet)\n            }\n\n            return ValueSetService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('projectListService', ['$resource', 'apiEndpointsService', function ($resource, apiEndpointsService) {\n\n    var ProjectService = {\n        data: null,\n        current: null,\n\n        getData: function() {\n            return ProjectService.data;\n        },\n\n        setData: function(dataToSet) {\n            ProjectService.data = dataToSet;\n        },\n\n        getCurrent: function() {\n            return ProjectService.current;\n        },\n\n        setCurrent: function(currentToSet) {\n            ProjectService.current = currentToSet;\n        },\n\n        ajax: $resource(\n            apiEndpointsService.getProjectRestUrl(), {\n                projectId: '@projectId'\n            }, {\n                update: {\n                    method:'PUT'\n                }\n            }\n        )\n    };\n\n    return ProjectService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('groupService', ['$rootScope', '$resource', 'apiEndpointsService', function($rootScope, $resource, apiEndpointsService) {\n\n    var GroupService = {\n        ajax: $resource(apiEndpointsService.getGroupRestUrl(), {\n                groupId: '@groupId',\n                projectId: '@projectId'\n            }, {\n                update: {\n                    method:'PUT'\n                }\n            }\n        ),\n\n        openGroupModal: function(project, group) {\n            if (group == null) {\n                group = {\n                    groupId: null,\n                    projectId: project.id,\n                    name: null,\n                    recording: true,\n                    forwarding: false,\n                    recordTo: null\n                };\n            }\n            $rootScope.$broadcast('openGroupModal', group);\n        }\n    };\n\n    return GroupService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('groupListService', ['$resource', 'apiEndpointsService', function ($resource, apiEndpointsService) {\n\n    var GroupListService = {\n        data: null,\n\n        current: null,\n\n        urlForNewRequests: null,\n\n\n        getData: function() {\n            return GroupListService.data;\n        },\n\n        setData: function(dataToSet) {\n            GroupListService.data = dataToSet;\n        },\n\n        getCurrent: function() {\n            return GroupListService.current;\n        },\n\n        setCurrent: function(currentToSet) {\n            GroupListService.current = currentToSet;\n        },\n\n        ajax: $resource(apiEndpointsService.getGroupRestUrl(), {groupId: '@groupId'}, {}),\n\n        addGroupToList: function(group) {\n            if (GroupListService.data == null) {\n                GroupListService.data = [];\n            }\n            GroupListService.data.push(group);\n        },\n\n        removeFromGroupList: function(index) {\n            GroupListService.data.splice(index, 1);\n        },\n\n        setUrlForNewRequests: function(url) {\n            GroupListService.urlForNewRequests = url;\n        },\n\n        getUrlForNewRequests: function() {\n            return GroupListService.urlForNewRequests;\n        }\n    };\n\n    return GroupListService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('requestService', ['$resource', 'apiEndpointsService', function($resource, apiEndpointsService) {\n\n    var RequestService = {\n        ajax: $resource(apiEndpointsService.getRequestRestUrl(), {\n                requestId: '@requestId',\n                groupId: '@groupId',\n                projectId: '@projectId'\n            }, {\n                update: {\n                    method:'PUT'\n                }\n            }\n        )\n    };\n\n    return RequestService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .factory('requestListService', ['$resource', 'apiEndpointsService',\n        function ($resource, apiEndpointsService) {\n\n            var RequestListService = {\n                data: null,\n\n                filteredData: null,\n\n                filteredDataCurrentIndex: 0,\n\n                current: null,\n\n                defaultOrderField: 'creationDate',\n\n                filters: {\n                    order: this.defaultOrderField,\n                    search: {\n                        query: undefined\n                    },\n                    paging: {\n                        limit: 10,\n                        current: 0\n                    }\n                },\n\n                getListOrder: function() {\n                    return RequestListService.filters.order;\n                },\n\n                setListOrder: function(field) {\n                    RequestListService.filters.order = field;\n                },\n\n                getSearchQuery: function() {\n                    return RequestListService.filters.search.query;\n                },\n\n                setSearchQuery: function(query) {\n                    RequestListService.filters.search.query = query;\n                },\n\n                getLimit: function() {\n                    return RequestListService.filters.paging.limit;\n                },\n\n                setLimit: function(limit) {\n                    return RequestListService.filters.paging.limit = limit;\n                },\n\n                getCurrentPage: function() {\n                    return RequestListService.filters.paging.current;\n                },\n\n                setCurrentPage: function(n) {\n                    RequestListService.filters.paging.current = n;\n                },\n\n                getCurrent: function() {\n                    return RequestListService.current;\n                },\n\n                setCurrent: function(currentToSet) {\n                    RequestListService.current = currentToSet;\n                },\n\n                setData: function(data) {\n                    RequestListService.data = data;\n                    RequestListService.setCurrentPage(0);\n                    RequestListService.setListOrder(RequestListService.defaultOrderField);\n                    RequestListService.setSearchQuery(undefined);\n                },\n\n                getData: function() {\n                    return RequestListService.data;\n                },\n\n                setFilteredData: function(data) {\n                    RequestListService.filteredData = data;\n                },\n\n                getFilteredData: function() {\n                    return RequestListService.filteredData;\n                },\n\n                ajax: $resource(apiEndpointsService.getRequestRestUrl(), {\n                        groupId: '@groupId',\n                        projectId: '@projectId'\n                    }, {}\n                ),\n\n                getRequestIndex: function(id) {\n                    if (RequestListService.getData() != null) {\n                        for (var index = 0, l = RequestListService.getData().length; index < l; index++) {\n                            if (id == RequestListService.getData()[index].id) {\n                                return index;\n                            }\n                        }\n                    }\n                    return -1;\n                },\n\n                removeFromRequestList: function(index) {\n                    RequestListService.data.splice(index, 1);\n                }\n            };\n\n            return RequestListService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('accountService', ['$rootScope', '$resource', 'apiEndpointsService',\n    function($rootScope, $resource, apiEndpointsService) {\n        var AccountService = {\n            currentAccount: null,\n\n            getCurrentAccount: function() {\n                return AccountService.currentAccount;\n            },\n\n            setCurrentAccount: function(account) {\n                AccountService.currentAccount = account;\n            },\n\n            ajax: $resource(apiEndpointsService.getAccountRestUrl(), {\n                    accountId: '@accountId'\n                }, {\n                    update: {\n                        method:'PUT'\n                    }\n                }\n            ),\n\n            openAccountModal: function(account) {\n                if (account == null) {\n                    account = {\n                        id: null,\n                        firstName: null,\n                        lastName: null,\n                        role: 'USER',\n                        username: null\n                    };\n                }\n                $rootScope.$broadcast('openAccountModal', account);\n            }\n        };\n\n        return AccountService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp')\n    .factory('accountListService', ['$resource', 'apiEndpointsService',\n        function ($resource, apiEndpointsService) {\n\n            var AccountListService = {\n                data: null,\n\n                getData: function() {\n                    return AccountListService.data;\n                },\n\n                setData: function(dataToSet) {\n                    AccountListService.data = dataToSet;\n                },\n\n                ajax: $resource(apiEndpointsService.getAccountRestUrl(), {accountId: '@accountId'}, {}),\n            };\n\n            return AccountListService;\n}]);\n","'use strict';\n\nangular.module('mockengerClientMainApp').factory('loginService', ['$modal', function($modal) {\n\n    var LoginService = {\n        showSignInForm: function(scope) {\n            $modal.open({\n                templateUrl: '/modules/main/views/loginForm.html',\n                controller: 'LoginController',\n                backdrop : 'static',\n                keyboard: false,\n                scope: scope\n            });\n        }\n    };\n\n    return LoginService;\n}]);\n"],"sourceRoot":"/source/"}